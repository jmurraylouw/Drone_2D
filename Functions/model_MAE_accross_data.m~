function MAE_data = model_MAE_accross_data(y_data, u_data, t, A, B, N_test)
%% Get Mean Absolute Error of model predicted forward by N_test 
%% from every time step in dataset
% i.e. Evaluate performance of model at different times during simulation
% MAE_data = MAE value for each time step
% y_data = output data from simulation to compare to
% u_data = input data from simulation
% t      = time data of sim
% A      = System matrix of model
% B      = input matrix of model
% N_test = number of data samples to predict forward when calculating MAE

ny = size(y_data,1);
nu = size(u_data,1);
q = size(A,1)/ny; % Number of delay coordinates in model

for k = 1:length(t)
    % Data to test with, starting at sample k           
    y_run = y_data(:, k + (0:N_test-1));
    u_run = u_data(:, k + (0:N_test-1));
    t_run =      t(:, k + (0:N_test-1));

    % Initial condition
    y_hat_0 = y_data(:,k);

    % Initial delay coordinates
    y_delays = zeros((q-1)*ny, 1);
    j = k; % index of y_data
    for i = 1:ny:ny*(q-1) % index of y_delays
        j = j - 1; % previos index of y_data
        if j < 1 % Assume for time steps before k=1, y = initial condition
            y_j = y_data(:,1);
        else
            y_j = y_data(:,j);
        end
        
        y_delays(i:(i+ny-1)) = y_j; % INsert into delay vector
    end

    % Run model
    y_hat = zeros(ny,N_test); % Empty estimated Y
    y_hat(:,1) = y_hat_0; % Initial condition
    for j = 1:N_test-1
        upsilon = [y_delays; u_run(:,j)]; % Concat delays and control for use with B
        y_hat(:,j+1) = A*y_hat(:,j) + B*upsilon;
        y_delays = [y_hat(:,j); y_delays(1:(end-ny),:)]; % Add y(k) to y_delay for next step [y(k); y(k-1); ...]
    end

    % Vector of Mean Absolute Error on testing data
    MAE = sum(abs(y_hat - y_run), 2)./N_test; % For each measured state

    % Save results
    results(emptry_row,:) = [{k, q, mean(MAE)}, num2cell(MAE')]; % add to table of results
    emptry_row = emptry_row + 1; 

    % Plot and pause
    plot_and_pause = 0;
    if k == 55/Ts
        clf('reset')
        plot(t_run, y_run)
        hold on;
        plot(t_run, y_hat, '--')
        hold off;
        disp('Pausing... Press enter to continue')
        pause
        disp('Continuing...')
    end
    
end % k
